Introduction to PL/SQL
[OK] Explain the need for PL/SQL
[OK] Explain the benefits of PL/SQL
[OK] Identify the different types of PL/SQL blocks
[OK] Output messages in PL/SQL
Declaring PL/SQL Variables
[OK] Recognize valid and invalid identifiers
[OK] List the uses of variables, declare and initialize variables, use bind variables
[OK] List and describe various data types using the %TYPE attribute
Writing Executable Statements
[OK] Identify lexical units in a PL/SQL block
[OK] Use built-in SQL functions in PL/SQL and sequences in PL/SQL expressions
[OK] Describe when implicit conversions take place and when explicit conversions have to be dealt with
[OK] Write nested blocks and qualify variables with labels
[OK] Write readable code with appropriate indentation
Interacting with the Oracle Database Server
[OK] Create PL/SQL executable blocks using DML and transaction control statements (ch. 14)
[OK] Make use of the INTO clause to hold the values returned by a SQL statement
Writing Control Structures
[OK] Identify the uses and types of control structures (IF, CASE statements and expressions)
[OK] Construct and identify loop statements
[OK] Apply guidelines when using conditional control structures
Working with Composite Data Types
[OK] Create user-defined PL/SQL records
[OK] Create a record with the %ROWTYPE attribute
[OK] Create an INDEX BY table and INDEX BY table of records (associative arrays)
[OK] Describe the differences among records, tables, and tables of records
Using Explicit Cursors
[OK] Distinguish between usage of implicit and explicit cursors, use SQL cursor attributes
[OK] Declare and control explicit cursors, use simple loops and cursor FOR loops to fetch data
[OK] Declare and use cursors with parameters
[OK] Lock rows with the FOR UPDATE clause and reference the current row with the WHERE CURRENT OF clause
Handling Exceptions
[OK] Define PL/SQL exceptions
[OK] Recognize unhandled exceptions
[OK] Handle different types of exceptions (pre-defined exceptions, non-predefined exceptions and user-defined exceptions)
[OK] Propagate exceptions in nested blocks and call applications

Creating Stored Procedures and Functions
[OK] Differentiate between anonymous blocks and subprograms
[OK] Create a simple procedure and invoke it from an anonymous block
[OK] Create a simple function
[OK] Create a simple function that accepts a parameter
[OK] Differentiate between procedures and functions

Oracle Database 11g: Develop PL/SQL Program Units

Creating Procedures
[OK] Differentiate between anonymous blocks and subprograms, use a modularized and layered subprogram design, and identify the benefits of subprograms
[OK] Create a simple procedure and invoke it from an anonymous block
[OK] Work with procedures
[OK] Handle exceptions in procedures, remove a procedure, and display a procedure's information
Creating Functions
[OK] Differentiate between a procedure and a function
[OK] Describe the uses of functions
[OK] Work with functions (create, invoke and remove functions)
Creating Packages
[OK] Identify the benefits and the components of packages
[OK] Work with packages (create package specification and body, invoke package subprograms, remove a package and display package information)
Working with Packages
[OK] Overload package subprograms, use forward declarations
[OK] Create an initialization block in a package body
[OK] Manage persistent package data states for the life of a session and use PL/SQL tables and records in packages
Using Oracle-Supplied Packages in Application Development
[OK] Describe how the DBMS_OUTPUT package works
[OK] Use UTL_FILE to direct output to operating system files
[OK] Describe the main features of UTL_MAIL
Using Dynamic SQL
[!!] Describe the execution flow of SQL statements
[OK] Use Native Dynamic SQL (NDS)
[!!] Use the DBMS_SQL package
Design Considerations for PL/SQL Code
[!!] Create standard constants and exceptions
[!!] Write and call local subprograms
[!!] Control the run-time privileges of a subprogram
[OK] Perform autonomous transactions (ch. 14)
[!!] Use NOCOPY hint, PARALLEL ENABLE hint and DETERMINISTIC clause
[!!] Use bulk binding and the RETURNING clause with DML
Creating Triggers
[OK] Describe different types of triggers and their uses
[OK] Create database triggers
[OK] Manage triggers
Creating Compound, DDL, and Event Database Triggers
[>>] Create triggers on DDL statements
[!!] Create triggers on system events
Using the PL/SQL Compiler
[!!] Describe the new PL/SQL compiler and features
[!!] Use the new PL/SQL compiler initialization parameters
[!!] Use the new PL/SQL compile time warnings
Managing PL/SQL Code
[OK] Describe and use conditional compilation
[OK] Hide PL/SQL source code using dynamic obfuscation and the Wrap utility
Managing Dependencies
[OK] Track and manage procedural dependencies


From time to time, check the exam topics list for updates:
https://education.oracle.com/oracle-database-11g-program-with-pl-sql/pexam_1Z0-144

Following are topics not explicitly listed in the exam but likely to be tested
[  ] Distinguish between SQL and PL/SQL data types
[  ] SQL and PL/SQL types that have an implicit NOT NULL constraint
[  ] Which SQL functions are available in PL/SQL and which are not 
     (remember SQL function can be made available in PL/SQL using the SELECT INTO clause)
[  ] Values returned by the RETURNING clause when performing a DML on a table 
     whose rows are affected by TRIGGERS.
[  ] Working with TABLE functions, STREAMING functions, PIPELINED functions 
     (can them be declared in packages?) [see page 602 Oracle PL/SQL programming 5th]
[  ] Restrictions on using FOLLOWS clause in triggers

QUESTIONS
001. Are DEFAULT and (:=) always interchangeble in PL/SQL ? YES, they are.
